#! /usr/bin/env python

import socket
import struct
import binascii

global IP, TCP, UDP, HTTP

IP, TCP, UDP, HTTP = False, False, False, False


def parseEthernet(pkt):
	global IP
	header = struct.unpack("!6s6s2s", pkt)
	dest = binascii.hexlify(header[0])
	source = binascii.hexlify(header[1])
	print "\nEthernet:"
	print "Scource Address:\t" + source
	print "Destination Address:\t" + dest
	if binascii.hexlify(header[2]) == '0800':
		IP=True

def parseIP(pkt):
	global TCP
	global UDP
	header = struct.unpack("!9s1s2s4s4s",pkt)
	source = socket.inet_ntoa(header[3])
	dest = socket.inet_ntoa(header[4])
	print "\nIP:"
	print "Source IP:\t\t" + source
	print "Destination IP:\t" + dest
	if binascii.hexlify(header[1]) == '06':
		TCP = True
	if binascii.hexlify(header[1]) == '17':
		UDP = True

def parseTCP(pkt):
	global HTTP
	header = struct.unpack("!2s2s16s",pkt)
	source_port = binascii.hexlify(header[0])
	dest_port = binascii.hexlify(header[1])
	print "\nTCP:"
	print "Source Port:\t\t ", int(source_port, 16)
	print "Destination Port\t", int(dest_port, 16)
	if (int(source_port, 16) == 80 or int(dest_port, 16) == 80):
		HTTP=True

def parseUDP(pkt):
	global HTTP
        header = struct.unpack("!2s2s16s",pkt)
        source_port = binascii.hexlify(header[0])
        dest_port = binascii.hexlify(header[1])
        print "\nTCP:"
        print "Source Port:\t\t ", int(source_port, 16)
        print "Destination Port\t", int(dest_port, 16)
        if (int(source_port, 16) == 80 or int(dest_port, 16) == 80):
                HTTP=True

def parseHTTP(pkt):
	print "\nHTTP data:"
	print pkt

raw = socket.socket(socket.PF_PACKET, socket.SOCK_RAW, socket.htons(0x0800))

while True:
	pkt = raw.recvfrom(2048)
	ether = pkt[0][0:14]
	ip = pkt[0][14:34]
	tcp_udp = pkt[0][34:54]
	http = pkt[0][54:]
	parseEthernet(ether)

	if IP:
		parseIP(ip)
	if TCP:
		parseTCP(tcp_udp)
	elif UDP:
		parseUDP(tcp_udp)
	if HTTP:
		parseHTTP(http)

	print "\nParse Finished!\n\n"
